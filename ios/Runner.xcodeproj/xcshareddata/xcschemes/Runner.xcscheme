<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <PreActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#!/bin/bash&#10;&#10;function entry_decode() { &#10;    echo &quot;${*}&quot; | base64 --decode; &#10;}&#10;&#10;# Check if DART_DEFINES is set&#10;if [[ -z &quot;$DART_DEFINES&quot; ]]; then&#10;    echo &quot;Warning: DART_DEFINES is not set&quot;&#10;    exit 0&#10;fi&#10;&#10;IFS=&apos;,&apos; read -r -a define_items &lt;&lt;&lt; &quot;$DART_DEFINES&quot;&#10;&#10;result=()&#10;resultIndex=0&#10;&#10;for index in &quot;${!define_items[@]}&quot;&#10;do&#10;    decoded_item=$(entry_decode &quot;${define_items[$index]}&quot;)&#10;    &#10;    # Skip empty items&#10;    if [[ -z &quot;$decoded_item&quot; ]]; then&#10;        continue&#10;    fi&#10;    &#10;    # Check if it contains an equals sign (key=value format)&#10;    if [[ $decoded_item == *=* ]]; then&#10;        # Extract key and value&#10;        key=&quot;${decoded_item%%=*}&quot;&#10;        value=&quot;${decoded_item#*=}&quot;&#10;        &#10;        # Convert key to uppercase and replace special characters with underscores&#10;        xcconfig_key=$(echo &quot;$key&quot; | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos; | sed &apos;s/[^A-Z0-9_]/_/g&apos;)&#10;        &#10;        # Escape special characters in value for xcconfig format&#10;        escaped_value=$(echo &quot;$value&quot; | sed &apos;s/\\/\\\\/g&apos; | sed &apos;s/&quot;/\\&quot;/g&apos;)&#10;        &#10;        # Add to result array&#10;        result[$resultIndex]=&quot;$xcconfig_key=$escaped_value&quot;&#10;        resultIndex=$((resultIndex+1))&#10;        &#10;        echo &quot;Added: $xcconfig_key=$escaped_value&quot;&#10;    else&#10;        # Handle defines without values (flags)&#10;        flag_key=$(echo &quot;$decoded_item&quot; | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos; | sed &apos;s/[^A-Z0-9_]/_/g&apos;)&#10;        result[$resultIndex]=&quot;$flag_key=TRUE&quot;&#10;        resultIndex=$((resultIndex+1))&#10;        &#10;        echo &quot;Added flag: $flag_key=TRUE&quot;&#10;    fi&#10;done&#10;&#10;# Create the AppConfig.xcconfig file&#10;config_file=&quot;${SRCROOT}/Flutter/AppConfig.xcconfig&quot;&#10;echo &quot;// Auto-generated from dart defines&quot; &gt; &quot;$config_file&quot;&#10;echo &quot;// Generated on: $(date)&quot; &gt;&gt; &quot;$config_file&quot;&#10;echo &quot;&quot; &gt;&gt; &quot;$config_file&quot;&#10;&#10;# Write all defines to the file&#10;for item in &quot;${result[@]}&quot;; do&#10;    echo &quot;$item&quot; &gt;&gt; &quot;$config_file&quot;&#10;done&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "97C146ED1CF9000F007C117D"
                     BuildableName = "Runner.app"
                     BlueprintName = "Runner"
                     ReferencedContainer = "container:Runner.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#!/bin/bash&#10;&#10;# Pre-build script to add App Links domain to entitlements&#10;# This script reads APPLINKSURLHOST from the appropriate xcconfig file&#10;# based on build configuration and adds it to Runner/Runner.entitlements&#10;&#10;set -e&#10;&#10;# Define base paths&#10;FLUTTER_DIR=&quot;${SRCROOT}/Flutter&quot;&#10;ENTITLEMENTS_PATH=&quot;${SRCROOT}/Runner/Runner.entitlements&quot;&#10;&#10;echo &quot;Pre-build script: Adding App Links domain to entitlements&quot;&#10;echo &quot;Build Configuration: $CONFIGURATION&quot;&#10;&#10;# Determine which xcconfig file to use based on build configuration&#10;case &quot;$CONFIGURATION&quot; in&#10;    &quot;Debug&quot;)&#10;        XCCONFIG_FILE=&quot;Debug.xcconfig&quot;&#10;        ;;&#10;    &quot;Release&quot;)&#10;        XCCONFIG_FILE=&quot;Release.xcconfig&quot;&#10;        ;;&#10;    &quot;Profile&quot;)&#10;        XCCONFIG_FILE=&quot;Release.xcconfig&quot;  # Profile typically uses Release config&#10;        ;;&#10;    *)&#10;        echo &quot;Warning: Unknown configuration &apos;$CONFIGURATION&apos;, falling back to Debug.xcconfig&quot;&#10;        XCCONFIG_FILE=&quot;Debug.xcconfig&quot;&#10;        ;;&#10;esac&#10;&#10;XCCONFIG_PATH=&quot;${FLUTTER_DIR}/${XCCONFIG_FILE}&quot;&#10;APPCONFIG_PATH=&quot;${FLUTTER_DIR}/Appconfig.xcconfig&quot;&#10;&#10;echo &quot;Using configuration file: $XCCONFIG_FILE&quot;&#10;&#10;# Check if the main xcconfig file exists&#10;if [ ! -f &quot;$XCCONFIG_PATH&quot; ]; then&#10;    echo &quot;Error: $XCCONFIG_FILE not found at $XCCONFIG_PATH&quot;&#10;    exit 1&#10;fi&#10;&#10;# Check if entitlements file exists&#10;if [ ! -f &quot;$ENTITLEMENTS_PATH&quot; ]; then&#10;    echo &quot;Error: Runner.entitlements not found at $ENTITLEMENTS_PATH&quot;&#10;    exit 1&#10;fi&#10;&#10;# Function to extract variable from xcconfig file&#10;extract_variable_from_xcconfig() {&#10;    local file_path=&quot;$1&quot;&#10;    local var_name=&quot;$2&quot;&#10;    &#10;    # First try to find the variable directly in the file&#10;    local value=$(grep &quot;^${var_name}&quot; &quot;$file_path&quot; 2&gt;/dev/null | cut -d&apos;=&apos; -f2 | xargs || echo &quot;&quot;)&#10;    &#10;    if [ -n &quot;$value&quot; ]; then&#10;        echo &quot;$value&quot;&#10;        return 0&#10;    fi&#10;    &#10;    return 1&#10;}&#10;&#10;# Try to extract APPLINKSURLHOST from the configuration-specific file first&#10;APPLINKSURLHOST=&quot;&quot;&#10;&#10;# Try main config file first&#10;if APPLINKSURLHOST=$(extract_variable_from_xcconfig &quot;$XCCONFIG_PATH&quot; &quot;APPLINKSURLHOST&quot;); then&#10;    echo &quot;Found APPLINKSURLHOST in $XCCONFIG_FILE: $APPLINKSURLHOST&quot;&#10;else&#10;    # If not found, try the included Appconfig.xcconfig&#10;    if [ -f &quot;$APPCONFIG_PATH&quot; ]; then&#10;        if APPLINKSURLHOST=$(extract_variable_from_xcconfig &quot;$APPCONFIG_PATH&quot; &quot;APPLINKSURLHOST&quot;); then&#10;            echo &quot;Found APPLINKSURLHOST in Appconfig.xcconfig: $APPLINKSURLHOST&quot;&#10;        fi&#10;    fi&#10;fi&#10;&#10;# If still not found, try a more comprehensive search through included files&#10;if [ -z &quot;$APPLINKSURLHOST&quot; ]; then&#10;    echo &quot;APPLINKSURLHOST not found in primary config files, searching included files...&quot;&#10;    &#10;    # Get all #include statements from the main config file&#10;    INCLUDED_FILES=$(grep &quot;^#include&quot; &quot;$XCCONFIG_PATH&quot; 2&gt;/dev/null | sed &apos;s/#include[[:space:]]*[&quot;&lt;]\([^&quot;&gt;]*\)[&quot;&gt;].*/\1/&apos; || echo &quot;&quot;)&#10;    &#10;    for included_file in $INCLUDED_FILES; do&#10;        # Handle relative paths&#10;        if [[ &quot;$included_file&quot; != /* ]]; then&#10;            included_file=&quot;${FLUTTER_DIR}/${included_file}&quot;&#10;        fi&#10;        &#10;        if [ -f &quot;$included_file&quot; ]; then&#10;            echo &quot;Checking included file: $included_file&quot;&#10;            if APPLINKSURLHOST=$(extract_variable_from_xcconfig &quot;$included_file&quot; &quot;APPLINKSURLHOST&quot;); then&#10;                echo &quot;Found APPLINKSURLHOST in included file: $APPLINKSURLHOST&quot;&#10;                break&#10;            fi&#10;        fi&#10;    done&#10;fi&#10;&#10;# Final check - if still empty, exit with warning&#10;if [ -z &quot;$APPLINKSURLHOST&quot; ]; then&#10;    echo &quot;Warning: APPLINKSURLHOST not found in any configuration files&quot;&#10;    echo &quot;Checked files:&quot;&#10;    echo &quot;  - $XCCONFIG_PATH&quot;&#10;    [ -f &quot;$APPCONFIG_PATH&quot; ] &amp;&amp; echo &quot;  - $APPCONFIG_PATH&quot;&#10;    echo &quot;Make sure one of your xcconfig files contains: APPLINKSURLHOST=your.domain.com&quot;&#10;    exit 0&#10;fi&#10;&#10;echo &quot;Using APPLINKSURLHOST: $APPLINKSURLHOST&quot;&#10;&#10;# Create the app links domain string&#10;APP_LINKS_DOMAIN=&quot;applinks:$APPLINKSURLHOST&quot;&#10;&#10;# Check if the domain is already in the entitlements file&#10;if grep -q &quot;$APP_LINKS_DOMAIN&quot; &quot;$ENTITLEMENTS_PATH&quot;; then&#10;    echo &quot;App Links domain &apos;$APP_LINKS_DOMAIN&apos; already exists in entitlements file&quot;&#10;    exit 0&#10;fi&#10;&#10;# Use PlistBuddy to add the app links domain to the associated domains array&#10;# First, check if com.apple.developer.associated-domains key exists&#10;if /usr/libexec/PlistBuddy -c &quot;Print :com.apple.developer.associated-domains&quot; &quot;$ENTITLEMENTS_PATH&quot; &gt;/dev/null 2&gt;&amp;1; then&#10;    # Key exists, check if it&apos;s an array and add the new domain&#10;    CURRENT_TYPE=$(/usr/libexec/PlistBuddy -c &quot;Print :com.apple.developer.associated-domains&quot; &quot;$ENTITLEMENTS_PATH&quot; 2&gt;/dev/null | head -1)&#10;    &#10;    if [[ &quot;$CURRENT_TYPE&quot; == *&quot;Array&quot;* ]]; then&#10;        # It&apos;s an array, add to it&#10;        /usr/libexec/PlistBuddy -c &quot;Add :com.apple.developer.associated-domains: string $APP_LINKS_DOMAIN&quot; &quot;$ENTITLEMENTS_PATH&quot; 2&gt;/dev/null || {&#10;            echo &quot;Note: Domain may already exist or there was an issue adding it&quot;&#10;        }&#10;    else&#10;        echo &quot;Error: com.apple.developer.associated-domains exists but is not an array&quot;&#10;        exit 1&#10;    fi&#10;else&#10;    # Key doesn&apos;t exist, create it with the domain&#10;    echo &quot;Creating new associated-domains array with app links domain&quot;&#10;    /usr/libexec/PlistBuddy -c &quot;Add :com.apple.developer.associated-domains array&quot; &quot;$ENTITLEMENTS_PATH&quot;&#10;    /usr/libexec/PlistBuddy -c &quot;Add :com.apple.developer.associated-domains:0 string $APP_LINKS_DOMAIN&quot; &quot;$ENTITLEMENTS_PATH&quot;&#10;fi&#10;&#10;echo &quot;Successfully added &apos;$APP_LINKS_DOMAIN&apos; to Runner.entitlements&quot;&#10;&#10;# Verify the addition&#10;echo &quot;Current associated domains in entitlements:&quot;&#10;/usr/libexec/PlistBuddy -c &quot;Print :com.apple.developer.associated-domains&quot; &quot;$ENTITLEMENTS_PATH&quot; 2&gt;/dev/null || echo &quot;No associated domains found&quot;&#10;&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "97C146ED1CF9000F007C117D"
                     BuildableName = "Runner.app"
                     BlueprintName = "Runner"
                     ReferencedContainer = "container:Runner.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PreActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
               BuildableName = "Runner.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
